syntax = "proto2";
package chat;

// activate, message, deactivate

// stream of messages coming in from server 
// stream dies once a message is sent - reactivated immediately.

service ChatService {
    
    // register user
    rpc registerRoom(RegisterClient) returns (RegisterClientResponse);

    // messaging
    rpc sendMessage(ChatMessage) returns (ChatMessageResponse);

    // updating messages
    rpc updateMessage(MessageUpdateReq) returns (stream UpdateChatMessages);

    // leaving
    rpc exitChat(ExitRequest) returns (ExitResponse);
}

// username
// chat room id
message RegisterClient {
    required string username = 1;
    required string roomId = 2;
}

// response : 
// chat authentication response
// (optional) current users in room
// (maybe) - all messages so far in given chat room
message RegisterClientResponse {
    // 1 is ok.
    // 2 is disallowed.
    required int32 status = 1;
    repeated RoomUserEntity users = 2;
}

// user entity for registration
// maybe add custom user features in future?
message RoomUserEntity {
    required string username = 1;
}

// chat payload
// username
// timestamp
message ChatMessage {
    required string username = 1;
    required string payload = 2;
    required string time = 3;
}

// Message Response
message ChatMessageResponse {
    // 1 means ok
    // 2 means err
    required int32 messsageStatus = 1;
}

// for pushing chat updates later
message MessageUpdateReq {
    required string username = 1;
}

message UpdateChatMessages {
    required ChatMessage messages = 1;
}

message ExitRequest {
    required string username = 1;
}

message ExitResponse {
    // 1 is permitted
    // 2 is not permitted
    required int32 exitStatus = 1;
}

message RegisterChatRoomRequest {
    // register chat room with username as admin
    required string chatRoomName = 1;
    required string username = 2;
}

message RegisterChatRoomResponse {
    // 1 is ok
    // 2 is the chat room already exists
    required int32 registrationStatus = 1;
}